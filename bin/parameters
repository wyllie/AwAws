#!/usr/bin/env python
import argparse
import sys
sys.path.append('.')
sys.path.append('..')
from AwAws.SharedResources.parameters import Parameters

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--service', help='service to access')
parser.add_argument('-n', '--name', help='name of parameter')
parser.add_argument('-a', '--account', help='account to use - need account number')
parser.add_argument('-r', '--region', default='us-east-2',
                    help='region to use (default: %(default)s')
#parser.add_argument('-x', '--secure', help='store value securely')
parser.add_argument('-v', '--value', help='value to set')
args = parser.parse_args()

account = args.account
service = args.service
name = args.name
new_value = args.value

# if we are not using the default account
role_arn = None
if args.account is not None:
    print('got', args.account)
    role_arn = 'arn:aws:iam::' + args.account + ':role/OrganizationAccountAccessRole'

params = Parameters(service, role_arn=role_arn)

if (service is not None) and (name is None):
    print('Parameters', params.get_all())

if name is not None:
    try:
        value = params.get_param_value(name)
        print('Parameter:', name, 'Value:', value)
    except RuntimeError:
        print('Parameter', name, 'is not set')


if new_value is not None:
    try:
        version = params.put_param(name, new_value)
        assert params.get_param_value(name) == new_value
    except (RuntimeError, AssertionError) as e:
        print('Error updating value:', str(e))
        exit()

    print('Value for', name, 'is', new_value)

